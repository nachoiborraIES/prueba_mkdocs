{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introducci\u00f3n a MkDocs","text":"<p>MkDocs es un framework que permite crear sitios web de documentaci\u00f3n muy f\u00e1cilmente, usando lenguaje Markdown.</p>"},{"location":"index.html#requisitos-previos","title":"Requisitos previos","text":"<p>Para poder utilizar MkDocs es necesario tener instalado Python previamente. Adem\u00e1s, necesitamos instalar las siguientes librer\u00edas usando el comando <code>pip</code>, bien en la distribuci\u00f3n general del sistema, o en un entorno virtual propio (venv):</p> <ul> <li>El propio framework mkdocs, que podemos instalar a trav\u00e9s de <code>pip</code> con el comando <code>pip install mkdocs</code></li> <li>Si queremos utilizar alg\u00fan tema de dise\u00f1o externo a MkDocs, como por ejemplo el que usaremos aqu\u00ed (material), lo debemos instalar tambi\u00e9n. El comando en este caso es <code>pip install mkdocs material</code></li> </ul>"},{"location":"index.html#comandos-utiles","title":"Comandos \u00fatiles","text":"<p>Para crear el esqueleto de un sitio MkDocs podemos usar el comando <code>mkdocs new</code> indicando un nombre de carpeta (se crear\u00e1 una carpeta con dicho nombre en la carpeta donde estemos):</p> <pre><code>mkdocs new mi_web\n</code></pre> <p>Se crear\u00e1 una estructura de carpetas y archivos que explicaremos m\u00e1s adelante. Pero antes explicamos otros comandos \u00fatiles que podemos lanzar durante nuestra edici\u00f3n del sitio:</p> <ul> <li><code>mkdocs serve</code> - Lanza un servidor local para probar la web. Cualquier cambio que hagamos en los contenidos o el estilo relanzar\u00e1 el servidor autom\u00e1ticamente, aunque es posible que algunos cambios profundos produzcan un error y necesitemos parar y reiniciar el servidor manualmente.</li> <li><code>mkdocs build</code> - Se genera el sitio HTML completo en la subcarpeta <code>site</code> (para publicarlo en un servidor local o externo).</li> <li><code>mkdocs -h</code> - Muestra ayuda en el terminal sobre el uso del comando</li> <li><code>mkdocs gh-deploy</code> - Despliega la web en el repositorio asociado de GitHub (este paso se deber\u00e1 hacer previamente), en una rama alternativa llamada <code>gh-pages</code>.</li> </ul>"},{"location":"index.html#estructura-de-carpetas","title":"Estructura de carpetas","text":"<p>La estructura de carpetas y archivos que se crea con el comando <code>mkdocs new</code> es la siguiente:</p> <ul> <li><code>mkdocs.yml</code>: fichero de configuraci\u00f3n general del sitio, en formato YAML</li> <li><code>docs/</code>: subcarpeta donde colocaremos todos nuestros documentos Markdown que formar\u00e1n parte de la web</li> <li><code>docs/index.md</code>: fichero inicial de prueba (p\u00e1gina ra\u00edz del sitio), con un contenido por defecto</li> </ul>"},{"location":"index.html#aspectos-relevantes-de-la-configuracion","title":"Aspectos relevantes de la configuraci\u00f3n","text":"<p>Veremos a continuaci\u00f3n algunos par\u00e1metros relevantes que podemos incluir en el fichero de configuraci\u00f3n <code>mkdocs.yml</code>, y que se pueden consultar en el fichero de configuraci\u00f3n de este mismo repositorio:</p> <ul> <li><code>site_name</code>: nombre del sitio (aparecer\u00e1 en la barra superior de navegaci\u00f3n)</li> <li><code>site_url</code>: URL principal del servidor donde se publicar\u00e1</li> <li><code>use_directory_urls</code>: a true hace URLs amigables, y a false deja las URL como p\u00e1ginas HTML (una por cada documento Markdown).</li> <li><code>nav</code>: define nuestro men\u00fa de navegaci\u00f3n (en el caso del tema material, se ubica en la parte izquierda). Especificamos el t\u00edtulo de cada apartado y la p\u00e1gina Markdown que se mostrar\u00e1.</li> <li><code>theme</code>: configura el tema CSS que se utilizar\u00e1. Internamente admite varias opciones; aqu\u00ed citamos las m\u00e1s habituales:<ul> <li><code>language</code>: idioma de la web (en nuestro caso, <code>es</code>)</li> <li><code>name</code>: nombre del tema (en nuestro ejemplo, material)</li> <li><code>palette</code>: permite elegir la paleta de colores del tema. Podemos optar por una combinaci\u00f3n simple de colores <code>primary</code> (barra de navegaci\u00f3n y color de enlaces) y <code>accent</code> (color de elementos interactuables), o bien definir esquemas. En concreto Material dispone de un tema oscuro llamado slate y un tema claro llamdo default, y podemos configurar aqu\u00ed los colores y c\u00f3mo cambiar de uno a otro desde la propia web. M\u00e1s informaci\u00f3n aqu\u00ed.</li> <li><code>font</code>: permite especificar fuente para el texto (propiedad <code>text</code>) y para el c\u00f3digo fuente (propiedad <code>code</code>).</li> <li><code>logo</code>: permite establecer el logo que aparecer\u00e1 en la barra de navegaci\u00f3n superior</li> <li><code>features</code>: caracter\u00edsticas adicionales a incluir en el tema. Algunos ejemplos son <code>header.autohide</code> (para ocultar la barra de navegaci\u00f3n superior cuando hacemos scroll por la p\u00e1gina), <code>navigation.top</code> (para mostrar un bot\u00f3n para volver al inicio cuando hacemos scroll hacia abajo), o <code>toc.follow</code> (para mostrar en la barra de navegaci\u00f3n el t\u00edtulo de la p\u00e1gina actual cuando hacemos scroll hacia abajo).</li> </ul> </li> </ul> <p>Para m\u00e1s informaci\u00f3n, visitar mkdocs.org </p>"},{"location":"01.html","title":"Opciones con el c\u00f3digo fuente","text":"<p>En esta p\u00e1gina veremos qu\u00e9 opciones tenemos para mostrar c\u00f3digo fuente en nuestros documentos.</p>"},{"location":"01.html#codigo-plano","title":"C\u00f3digo plano","text":"<p>El c\u00f3digo plano va encerrado entre triple acento abierto, como es habitual en Markdown, sin indicar ninguna caracter\u00edstica de lenguaje:</p> <pre><code># Funci\u00f3n Python\ndef mifuncion():\n    print(\"Hola mundo\")\n    return 0\n</code></pre>"},{"location":"01.html#codigo-para-un-lenguaje-especifico","title":"C\u00f3digo para un lenguaje espec\u00edfico","text":"<p>Para definir c\u00f3digo para un lenguaje indicado y que se resalte su sintaxis, debemos especificar el nombre del lenguaje junto al triple acento de apertura en el c\u00f3digo Markdown. Por ejemplo, <code>py</code> para Python:</p> <pre><code># Funci\u00f3n Python\ndef mifuncion():\n    print(\"Hola mundo\")\n    return 0\n</code></pre>"},{"location":"01.html#codigo-con-titulo","title":"C\u00f3digo con t\u00edtulo","text":"<p>Podemos especificar un t\u00edtulo (por ejemplo, el nombre del fichero fuente que se deber\u00eda crear), al crear el bloque de c\u00f3digo</p> funciones.py<pre><code>def mifuncion():\n    print(\"Hola mundo\")\n    return 0\n</code></pre>"},{"location":"01.html#codigo-con-numeros-de-linea","title":"C\u00f3digo con n\u00fameros de l\u00ednea","text":"<p>Tambi\u00e9n podemos indicar que se muestren n\u00fameros de l\u00ednea en el margen izquierdo:</p> <pre><code># Ejemplo de funci\u00f3n\ndef mifuncion():\n    print(\"Hola mundo\")\n    return 0\n</code></pre>"},{"location":"01.html#resaltar-lineas","title":"Resaltar l\u00edneas","text":"<p>Est\u00e1 permitido tambi\u00e9n resaltar l\u00edneas de c\u00f3digo</p> <pre><code># Ejemplo de funci\u00f3n\ndef mifuncion():\n    print(\"Hola mundo\")\n    return 0\n</code></pre>"},{"location":"02.html","title":"Subir documentaci\u00f3n a GitHub Pages","text":"<p>Por definir</p>"}]}